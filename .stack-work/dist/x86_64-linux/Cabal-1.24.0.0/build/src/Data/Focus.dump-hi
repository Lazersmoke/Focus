
==================== FINAL INTERFACE ====================
2016-10-17 20:25:24.392189 UTC

interface Focus-0.1.0.0-BqLk9ULyuYJ2wT8bvEsHJr:Data.Focus 8001
  interface hash: 9da09022ebf05fc660ad97e838dc5ebb
  ABI hash: 7073efc7a4d80a5279578438161c93bb
  export-list hash: b06ac5bcf9fd65bd0a66e88b825bb5b0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cb10f4f6adc1719f7637c70c053b46bd
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Focus.ExplicitFocus{Data.Focus.ExplicitFocus}
  Data.Focus.Focus{Data.Focus.focus Data.Focus.tinker}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
56b597b4965067543bb8bb7abb1cbb98
  $fFocuswpExplicitFocus ::
    Data.Focus.Focus w p (Data.Focus.ExplicitFocus w p)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ w @ p.
                  @ w
                  @ p
                  @ (Data.Focus.ExplicitFocus w p)
                  (Data.Focus.$fFocuswpExplicitFocus_$cfocus @ w @ p)
                  (Data.Focus.$fFocuswpExplicitFocus_$ctinker @ w @ p) -}
bd8a158e1e4ae4f9a45ab3ce88538bb0
  $fFocuswpExplicitFocus_$cfocus ::
    Data.Focus.ExplicitFocus w p -> w -> p
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ w @ p (ds :: Data.Focus.ExplicitFocus w p) ->
                 case ds of wild { Data.Focus.ExplicitFocus f ds1 -> f }) -}
fe26c4b053ad58188d6f19884514817a
  $fFocuswpExplicitFocus_$ctinker ::
    Data.Focus.ExplicitFocus w p -> (p -> p) -> w -> w
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ w @ p (ds :: Data.Focus.ExplicitFocus w p) ->
                 case ds of wild { Data.Focus.ExplicitFocus ds1 t -> t }) -}
38f81b5c817206ebe749429cb4f171a7
  $tc'C:Focus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11456219866357926793##
                   12775951057571963418##
                   Data.Focus.$trModule
                   Data.Focus.$tc'C:Focus1) -}
2ec461b95bdb06e1b03284c475293838
  $tc'C:Focus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Focus"#) -}
3675de13ae3e2a482a436ba568aa1c95
  $tc'ExplicitFocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18135606963208892196##
                   396354357688629604##
                   Data.Focus.$trModule
                   Data.Focus.$tc'ExplicitFocus1) -}
b5fa1ab6fb6c498cbfd2cac5ee4a5c70
  $tc'ExplicitFocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ExplicitFocus"#) -}
87c34a02f7ddfed92bf13a258f14c561
  $tcExplicitFocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4982317212666216078##
                   3980259405664432114##
                   Data.Focus.$trModule
                   Data.Focus.$tcExplicitFocus1) -}
1dffea1eaf8d35f46863d52a3ff7eef8
  $tcExplicitFocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ExplicitFocus"#) -}
b73dd393b66996c744199a24efabc5ec
  $tcFocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11566866528227580984##
                   13235241690841194394##
                   Data.Focus.$trModule
                   Data.Focus.$tcFocus1) -}
58e85fcf3719a2d960a181f4deaa1007
  $tcFocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Focus"#) -}
6049a926356e6fcd8b0d464419d55219
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Focus.$trModule2
                   Data.Focus.$trModule1) -}
6c807d74162023dc97d17e0d00cc9326
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Focus"#) -}
26f80f8d1de26496c676e959a1d2d63c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Focus-0.1.0.0-BqLk9ULyuYJ2wT8bvEsHJr"#) -}
f2625cfb477ffa9ed5514ea938488cd2
  data ExplicitFocus w p
    = ExplicitFocus (w -> p) ((p -> p) -> w -> w)
56b597b4965067543bb8bb7abb1cbb98
  class Focus whole part spec where
    focus :: spec -> whole -> part
    tinker :: spec -> (part -> part) -> whole -> whole
    {-# MINIMAL focus, tinker #-}
instance [safe] Data.Focus.Focus [., ., Data.Focus.ExplicitFocus]
  = Data.Focus.$fFocuswpExplicitFocus
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

